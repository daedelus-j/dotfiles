
let mapleader = '\'

set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jk <ESC>
" imap jk <Esc>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'MacVim.app')
    colorscheme solarized
  else
    colorscheme solarized
"    colorscheme deus
  endif
endif

set backupdir^=~/.vim/_backup//    " where to put backup files.
set directory^=~/.vim/_temp//      " where to put swap files.


" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

nmap <leader>ff :NERDTreeFind<CR>

" different tab settings for different langs
nmap \M :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
" nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
" nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" random mappings
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

nmap <leader>ww :Gstatus<CR>
nmap <leader>wg :Gdiff<CR>

" find and replace in visual mode
vmap <C-r> <Esc>:%s/<C-r>+//gc<left><left><left>

" set zencoding to ctrl-e
" let g:user_zen_expandabbr_key = '<c-e>'
" let g:use_zen_complete_tag = 1

let g:user_emmet_install_global = 0
autocmd FileType tmpl,html,css EmmetInstall
" let g:user_emmet_leader_key='<c-e>'

" generate doc comment template
map <leader>wc :JsDoc<cr>
let g:jsdoc_default_mapping = 0
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_allow_input_prompt = 1

"From http://vimcasts.org/episodes/tidying-whitespace/
"Preserves/Saves the state, executes a command, and returns to the saved state
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
"strip all trailing white space
autocmd BufWritePre :call whitespace#strip_trailing()<CR>

" easier navigation between windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window = 'order:ttb,max:25'
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_max_depth=60
" let g:ctrlp_working_path_mode = 'ra'

set omnifunc=syntaxcomplete#Complete

let g:ctrlp_max_files = 0
let g:ctrlp_working_path_mode = 0

" nmap ; :CtrlPBuffer<CR>
nmap <leader>T :CtrlPMRU<CR>
" nmap <leader>t :CtrlPClearCache<CR>:CtrlP<CR>
nmap <leader>t :CtrlP<CR>

" JSBeuatify config
map <c-f> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType scss noremap <buffer> <c-f> :call CSSBeautify()<cr>

" call ReloadAllSnippets()

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set copyindent
set nowrap


let g:ctrlp_match_window = 'order:ttb,max:20'


if filereadable(expand("~/.vimrc.local.mappings"))
  source ~/.vimrc.local.mappings
endif

" if !exists('g:snips_trigger_key')
"   let g:snips_trigger_key = '< tab>'
" endif

let g:SuperTabDefaultCompletionType = "context"

" remove preview window for tern completion
autocmd BufEnter * set completeopt-=preview
