
let mapleader = '\'

set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jk <ESC>
" imap jk <Esc>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>


" guted :source ~/.vimrc
" :filetype detect
" :exe ":echo 'vimrc reloaded'"
" settings
" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'MacVim.app')
    colorscheme solarized
  else
  "  colorscheme solarized
    colorscheme deus
  endif
endif

set backupdir^=~/.vim/_backup//    " where to put backup files.
set directory^=~/.vim/_temp//      " where to put swap files.


" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

nmap <leader>ff :NERDTreeFind<CR>

" different tab settings for different langs
nmap \M :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
" nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
" nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" random mappings
" nmap <C-N> :bnext<CR>
" nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

let JSHintUpdateWriteOnly=1

nmap <leader>ww :Gstatus<CR>
nmap <leader>wg :Gdiff<CR>

" find and replace in visual mode
vmap <C-r> <Esc>:%s/<C-r>+//gc<left><left><left>

" set zencoding to ctrl-e
" let g:user_zen_expandabbr_key = '<c-e>'
" let g:use_zen_complete_tag = 1

let g:user_emmet_install_global = 0
autocmd FileType tmpl,html,css EmmetInstall
" let g:user_emmet_leader_key='<c-e>'

" generate doc comment template
map <leader>wc :JsDoc<cr>
let g:jsdoc_default_mapping = 0
let g:jsdoc_additional_descriptions = 1
let g:jsdoc_allow_input_prompt = 1

"From http://vimcasts.org/episodes/tidying-whitespace/
"Preserves/Saves the state, executes a command, and returns to the saved state
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
"strip all trailing white space
autocmd BufWritePre :call whitespace#strip_trailing()<CR>

" easier navigation between windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window = 'order:ttb,max:25'
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_max_depth=60
" let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 0
let g:ctrlp_working_path_mode = 0
" nmap ; :CtrlPBuffer<CR>
nmap <leader>T :CtrlPMRU<CR>
" nmap <leader>t :CtrlPClearCache<CR>:CtrlP<CR>
nmap <leader>t :CtrlP<CR>

set omnifunc=syntaxcomplete#Complete

" JSBeuatify config
map <c-f> :call JsBeautify()<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType scss noremap <buffer> <c-f> :call CSSBeautify()<cr>

" call ReloadAllSnippets()

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set copyindent
set nowrap

let JSHintUpdateWriteOnly=1

if filereadable(expand("~/.vimrc.local.mappings"))
  source ~/.vimrc.local.mappings
endif

" if !exists('g:snips_trigger_key')
"   let g:snips_trigger_key = '< tab>'
" endif

" let g:SuperTabDefaultCompletionType = "context"

" remove preview window for tern completion
autocmd BufEnter * set completeopt-=preview

imap <C-c> <CR><Esc>O


let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

" show quotes in json files
let g:vim_json_syntax_conceal = 0

" Gist options
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1

let g:clang_library_path = "/usr/lib"
let g:clang_library_file = "libclang.so.1"
let g:clang_use_library = 1
let b:clang_user_options = '-std=c++11'
let g:clang_complete_auto = 1

let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8

if has("gui_running")
  let s:uname = system("uname")
  if s:uname == 'Darwin\n'
    set guifont=Inconsolata\ for\ Powerline:h15
  endif
else
  set term=xterm-256color
endif


" let g:EclimCompletionMethod = 'omnifunc'

let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1

"will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1


let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''


let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info


let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 1


let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = '<C-Space>'

autocmd filetype lisp,scheme,art setlocal equalprg=scmindent.rkt

" tslime {{{
let g:tslime_ensure_trailing_newlines = 1
let g:tslime_normal_mapping = '<localleader>q'
let g:tslime_visual_mapping = '<localleader>q'
let g:tslime_vars_mapping = '<localleader>Q'
" }}}

" niji {{{
let g:niji_dark_colours = [
    \ [ '81', '#5fd7ff'],
    \ [ '99', '#875fff'],
    \ [ '1',  '#dc322f'],
    \ [ '76', '#5fd700'],
    \ [ '3',  '#b58900'],
    \ [ '2',  '#859900'],
    \ [ '6',  '#2aa198'],
    \ [ '4',  '#268bd2'],
    \ ]
" }}}
